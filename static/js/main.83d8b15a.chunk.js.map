{"version":3,"sources":["components/From.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["FormText","props","useState","text","setText","className","style","color","mode","heading","backgroundColor","id","rows","value","onChange","event","target","onClick","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","my","split","length","Navbar","href","title","type","aboutText","toggle","role","htmlFor","Alert","alert","msg","propsTypes","PropTypes","string","isRequired","App","setmode","setalert","massage","setTimeout","body","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.83d8b15a.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport default function FormText(props) {\r\nconst [text,setText] = useState(' ')\r\n\r\n    const UpperCase = () => {\r\n        // console.log(\"your have clock the button\");\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert('Converted into UpperCase', 'success')\r\n    }\r\n\r\n    const loCase = () => {\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert('Converted into Lowercase', 'success')\r\n    }\r\n \r\n    const copyHandlar = () => {\r\n        var text = document.getElementById('Box')\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert('your text is copyed succesfully', 'success')\r\n    }\r\n\r\n    const clear = () =>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert('your text area is clear', 'success')\r\n    }\r\n\r\n const onChangeHandler= (event) => {\r\n    //  console.log(\"on chnage\");\r\n     setText(event.target.value)\r\n }\r\n\r\n    return (\r\n        <>\r\n    <div className = \"container\" style={{color:props.mode === 'dark' ? 'white' :'black'}}>\r\n        <h1>{props.heading}</h1>\r\n<div className=\"my-3\">\r\n{/* <label for=\"exampleFormControlTextarea1\" class=\"form-label\">Example textarea</label> */}\r\n<textarea className=\"form-control\" style={{backgroundColor:props.mode === 'dark' ? 'gray' :'white' ,color:props.mode === 'dark' ? 'white' :'black'}} id=\"Box\" rows=\"9\" value ={text} onChange={onChangeHandler}></textarea>\r\n</div>\r\n<button className= {`btn btn-${props.mode === 'dark' ? 'light' : 'primary'} mx-1`} onClick = {UpperCase}>Click To UpperCase Your Text</button>\r\n<button className = {`btn btn-${props.mode === 'dark' ? 'light' : 'primary'} mx-1`} onClick = {loCase}> Convert Into LowerCase</button>\r\n<button className = {`btn btn-${props.mode === 'dark' ? 'light' : 'primary'} mx-1`} onClick = {clear} >Clear Text</button>\r\n<button className = {`btn btn-${props.mode === 'dark' ? 'light' : 'primary'} mx-1`} onClick = {copyHandlar}>Copy Text</button>\r\n    </div>\r\n\r\n  {/* creating another div container for word and character count and preview and reading timming */}\r\n  <div className = \"container\" style={{color:props.mode === 'dark' ? 'white' :'black'}}>\r\n      <h3  my = \"6\">Text Analyse</h3>\r\n      {/* word and character count */}\r\n      <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n       \r\n       {/* reading timing */}\r\n       <p>{0.008 * text.split(\" \").length} Minutes Reading</p>\r\n\r\n    <h3>Preview</h3>\r\n    <p>{text.length>0?text:'Type in text box to preview.'}</p>\r\n  </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n   \r\n   return (\r\n        <div>\r\n           <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light'? 'primary' : 'dark'} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n        </li>\r\n        \r\n      </ul>\r\n      <form className=\"d-flex\">\r\n  \r\n      <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input className=\"form-check-input\" onClick= {props.toggle} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode} Theme</label>\r\n</div>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n// props type syntax\r\nNavbar.propsTypes= {\r\ntitle : PropTypes.string.isRequired,\r\naboutText: PropTypes.string\r\n}\r\n\r\n// default proptype syntax\r\n// Navbar.defaultProps= {\r\n//     title : 're-assin any title',\r\n//     aboutText : 'change the value of about section'\r\n// }","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    // const capatalise = (word) => {\r\n    //     const lower = word.toLowerCase()\r\n    //     return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    // }\r\n    return (\r\n        \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n</div>\r\n        \r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport From from './components/From';\nimport Navbar from './components/Navbar';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\n  \nfunction App() {\n\nconst [mode, setmode] = useState('light')\n\nconst toggleMode = () =>{\n    if(mode === 'light'){\n        setmode('dark')\n        document.body.style.backgroundColor = 'black';\n        showAlert( 'Darkmode is enable','success')\n        document.title = 'TextUtils-DarkMode'\n    }else{\n        setmode('light')\n        document.body.style.backgroundColor = 'white';\n        showAlert('LightMode is Enable', 'success')\n        document.title = 'TextUtils-LightMode'\n    } \n\n}\n\n\nconst [alert, setalert] = useState(null)\n\nconst showAlert= (massage, type) => {\n   setalert({\n       msg : massage,\n       type : type,\n   })\n   setTimeout(() => {\n       setalert(null)\n   }, 1500);\n}\n    return ( \n<>\n\n    <Navbar title = \"TEXTutils\" aboutText = \"About Us\" mode={mode} toggle={toggleMode}/>\n    <Alert alert={alert}/>\n   <div class = \"container\" my = \"5\">\n\n       \n          {/* <About heading = \"About Us\"/> */}\n        \n        \n          <From showAlert= {showAlert} heading = \"Enter your text\" mode={mode} />   \n          \n\n      \n </div>\n\n</>\n    );\n}\n\n\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}